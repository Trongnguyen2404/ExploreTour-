package com.example.vivu_application.data.network

import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object RetrofitClient {

    // ‚úÖ D√πng IP th·∫≠t cho real device (kh√¥ng ƒë·ªïi)
    private const val BASE_URL = "http://172.20.10.3:8080/" // Nh·ªõ d·∫•u / ·ªü cu·ªëi

    // üëá Logging m·ª©c BASIC ƒë·ªÉ tr√°nh lag do log qu√° nhi·ªÅu
    private val loggingInterceptor = HttpLoggingInterceptor().apply {
        level = HttpLoggingInterceptor.Level.BASIC // Ho·∫∑c NONE n·∫øu release
    }

    // üëá C·∫•u h√¨nh OkHttpClient
    private val okHttpClient = OkHttpClient.Builder()
        .retryOnConnectionFailure(true) // N·∫øu m·∫°ng y·∫øu, t·ª± th·ª≠ l·∫°i
        .addInterceptor(AuthInterceptor()) // G·∫Øn token t·ª± ƒë·ªông
        .addInterceptor(loggingInterceptor) // Ghi log
        .connectTimeout(30, TimeUnit.SECONDS) // Timeout ƒë·ªß d√†i
        .readTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .build()

    // üëá Retrofit build v·ªõi client ƒë√£ config
    private val retrofit = Retrofit.Builder()
        .baseUrl(BASE_URL)
        .client(okHttpClient)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    // üëá S·ª≠ d·ª•ng AuthApiService
    val authApiService: AuthApiService by lazy {
        retrofit.create(AuthApiService::class.java)
    }
}
